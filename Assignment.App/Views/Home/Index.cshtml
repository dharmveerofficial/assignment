@model IEnumerable<SettingViewModel>

@{
    ViewData["Title"] = "Settings";
}

<p>
    <a href="#" onclick="onCreateClick()" data-toggle="modal" data-target="#settingModal">Create New</a>
</p>
<table id="datatable" class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Key)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Value)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Value2)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Description)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Created)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.LastModified)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.IsDeleted)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody id="tbody">
    </tbody>
</table>

<div class="modal fade" id="settingModal" tabindex="-1" aria-labelledby="settingModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="settingModalLabel">Modal title</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <form id="SettingForm">
                <div class="modal-body">
                    <div class="form-group">
                        <label class="control-label" for="Key">Key<span style="color:red"> *</span></label>
                        <input class="form-control" type="text" data-val-required="The Key field is required." id="Key" name="Key" required />
                        <span class="text-danger field-validation-valid" data-valmsg-for="Key" data-valmsg-replace="true"></span>
                    </div>
                    <div class="form-group">
                        <label class="control-label" for="Value">Value<span style="color:red"> *</span></label>
                        <input class="form-control" type="text" data-val-required="The Value field is required." id="Value" name="Value" value="" required />
                        <span class="text-danger field-validation-valid" data-valmsg-for="Value" data-valmsg-replace="true"></span>
                    </div>
                    <div class="form-group">
                        <label class="control-label" for="Value2">Value2</label>
                        <input class="form-control" type="text" id="Value2" name="Value2" value="" />
                        <span class="text-danger field-validation-valid" data-valmsg-for="Value2" data-valmsg-replace="true"></span>
                    </div>
                    <div class="form-group">
                        <label class="control-label" for="Description">Description</label>
                        <input class="form-control" type="text" id="Description" name="Description" value="" />
                        <span class="text-danger field-validation-valid" data-valmsg-for="Description" data-valmsg-replace="true"></span>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="submit" class="btn btn-primary">Save</button>
                    <button type="button" id="hideSettingModal" class="btn btn-secondary" data-dismiss="modal">Close</button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        var table = ""
        let rowIndex = "";
        $(document).ready(function () {
            table = $('#datatable').DataTable({
                processing: true,
                serverSide: true,
                ajax: {
                    url: "/Home/Setting",
                    type: "POST",
                },
                filter: true,
                columns: [
                    { data: "key", name: "Key" },
                    { data: "value", name: "Value" },
                    { data: "value2", name: "Value2" },
                    { data: "description", name: "Description" },
                    { data: "created", name: "Created", render: function (data, type, row, index) { return new Date(row.created).toDateString() } },
                    { data: "lastModified", name: "Last Modified",render: function (data, type, row, index) {return row.lastModified? new Date(row.lastModified).toDateString():""}, orderable: false },
                    { data: "isDeleted", name: "Is Deleted", render: function (data, type, row, index) {return row.isDeleted?"Deleted":"Not Deleted"}, orderable: false },
                    {
                        data: "action", name: "Action", render: function (data, type, row, index) {
                            return `<a onclick='onEditClick(${JSON.stringify({ ...row, index: index.row })})' data-toggle="modal" data-target="#settingModal" href="#">Edit</a> |
                                                                        <a href="#" onclick='onDeleteClick(${JSON.stringify({ ...row, index: index.row })})'>Delete</a>`
                        }, orderable: false
                    },
                ]
            });
        });
        let id = ''
        $('#SettingForm').submit(function () {
            var $inputs = $('#SettingForm :input');
            var payload = {};
            $inputs.each(function () {
                payload[this.name] = $(this).val();
            });
            if (id) {
                payload['id'] = id;
            }
            $.ajax({
                type: "POST",
                url: id ? "/Home/UpdateSetting" : "/Home/AddSetting",
                data: payload,
                success: (res) => {
                    alert(res.msg)
                    if (id) {
                        table.row(rowIndex).data(res.item).draw();
                        rowIndex = ""
                    }
                    else {
                        table.row.add(res.item).draw(false);
                    }
                    $("#hideSettingModal").click()
                },
                error: (error) => {
                    alert(error.responseJSON);
                }
            });
            return false
        });
        function cammelCase(str) {
            return str && str.charAt(0).toLowerCase() + str.substring(1);
        }
        function onCreateClick() {
            id = ""
            var $inputs = $('#SettingForm :input');
            $inputs.each(function () {
                if (this.type != "submit" && this.type != "button") {
                    const tagId = "#" + this.id;
                    $(tagId).val("");
                }
            });
        }
        function onEditClick(item) {
            rowIndex = item.index;
            var $inputs = $('#SettingForm :input');
            id = item.id;
            $inputs.each(function () {
                if (this.type != "submit" && this.type != "button") {
                    const id = "#" + this.id;
                    $(id).val(item[cammelCase(this.id)]);
                }
            });
        }
        function onDeleteClick(deleteItem) {
            console.log(deleteItem)
            const action = confirm("Are you sure to delete?");
            if (action) {
                onDeleteConfirm(deleteItem)
            }
        }
        function onDeleteConfirm(deleteId) {
            $.ajax({
                type: "POST",
                url: "/Home/DeleteSetting",
                data: { id: deleteItem.id, ajax: true },
                success: (res) => {
                    table.row(deleteItem.index)
                        .remove()
                        .draw(false);
                    alert(res);
                },
                error: (error) => {
                    alert(error.responseJSON);
                }
            });
        }
    </script>
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}
